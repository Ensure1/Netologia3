class Person:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname

    def __str__(self):
        return f"Имя: {self.name}\nФамилия: {self.surname}"

class Student(Person):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lecture(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress:
            if course in lecturer.grades:
                lecturer.grades[course].append(grade)
            else:
                lecturer.grades[course] = [grade]
        else:
            return "Ошибка"

    def average_grade(self):
        total_grades = sum(sum(grades) for grades in self.grades.values())
        total_count = sum(len(grades) for grades in self.grades.values())
        return round(total_grades / total_count, 1) if total_count != 0 else 0
    
    def __str__(self):
        return super().__str__() + f"\nСредняя оценка за домашние задания: {self.average_grade()}\nКурсы в процессе изучения: {', '.join(self.courses_in_progress)}\nЗавершенные курсы: {', '.join(self.finished_courses)}"
    
    def __lt__(self, other):
        return self.average_grade() < other.average_grade()

class Mentor(Person):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.courses_attached = []

class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}
    
    def average_grade(self):
        total_grades = sum(sum(grades) for grades in self.grades.values())
        total_count = sum(len(grades) for grades in self.grades.values())
        return round(total_grades / total_count, 1) if total_count != 0 else 0
    
    def __str__(self):
        return super().__str__() + f"\nСредняя оценка за лекции: {self.average_grade()}"
    
    def __lt__(self, other):
        return self.average_grade() < other.average_grade()

class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course].append(grade)
            else:
                student.grades[course] = [grade]
        else:
            return "Ошибка"

# Функции для подсчета средних оценок по курсу

def average_student_grade(students, course):
    grades = [student.grades.get(course, []) for student in students]
    all_grades = [grade for sublist in grades for grade in sublist]
    return round(sum(all_grades) / len(all_grades), 1) if all_grades else 0

def average_lecturer_grade(lecturers, course):
    grades = [lecturer.grades.get(course, []) for lecturer in lecturers]
    all_grades = [grade for sublist in grades for grade in sublist]
    return round(sum(all_grades) / len(all_grades), 1) if all_grades else 0
